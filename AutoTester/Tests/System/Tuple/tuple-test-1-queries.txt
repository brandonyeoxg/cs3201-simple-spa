1 - Tuple-2 Functionality Test
procedure p1, p2;
Select <p1, p2>
A A, A B, B A, B B
5000
2 - Tuple-2 Functionality Test
procedure p; stmtLst sl;
Select <p, sl>
A 1,A 2,A 4,A 5,A 6,B 1,B 2,B 4,B 5,B 6
5000
3 - Tuple-2 Functionality Test
procedure p; stmt s;
Select <p, s>
A 1,A 2,A 3,A 4,A 5,A 6,A 7,B 1,B 2,B 3,B 4,B 5,B 6,B 7
5000
4 - Tuple-2 Functionality Test
procedure p; assign a;
Select <p, a>
A 2,A 5,A 6,A 7,B 2,B 5,B 6,B 7
5000
5 - Tuple-2 Functionality Test
procedure p; call ca;
Select <p, ca>
A 4, B 4
5000
6 - Tuple-2 Functionality Test
procedure p; while w;
Select <p, w>
A 1, B 1
5000
7 - Tuple-2 Functionality Test
procedure p; if ifs;
Select <p, ifs>
A 3, B 3
5000
8 - Tuple-2 Functionality Test
procedure p; variable v;
Select <p, v>
A a,A b,A c,A d,A i,A j,B a,B b,B c,B d,B i,B j
5000
9 - Tuple-2 Functionality Test
procedure p; prog_line pl;
Select <p, pl>
A 1,A 2,A 3,A 4,A 5,A 6,A 7,B 1,B 2,B 3,B 4,B 5,B 6,B 7
5000
10 - Tuple-2 Functionality Test
procedure p; constant co;
Select <p, co>
A 1,A 2,A 3,A 4,B 1,B 2,B 3,B 4
5000
11 - Tuple-2 Invalid Test (Syntax Error)
procedure p;
Select <p, BOOLEAN>
none
5000
12 - Tuple-2 Functionality Test
procedure p; stmtLst sl;
Select <sl, p>
1 A,2 A,4 A,5 A,6 A,1 B,2 B,4 B,5 B,6 B
5000
13 - Tuple-2 Functionality Test
procedure p; stmt s;
Select <s, p>
1 A,2 A,3 A,4 A,5 A,6 A,7 A,1 B,2 B,3 B,4 B,5 B,6 B,7 B
5000
14 - Select Functionality Test
procedure p; assign a;
Select <a, p>
2 A,5 A,6 A,7 A,2 B,5 B,6 B,7 B
5000
15 - Tuple-2 Functionality Test
procedure p; call ca;
Select <ca, p>
4 A, 4 B
5000
16 - Tuple-2 Functionality Test
procedure p; while w;
Select <w, p>
1 A, 1 B
5000
17 - Tuple-2 Functionality Test
procedure p; if ifs;
Select <ifs, p>
3 A, 3 B
5000
18 - Tuple-2 Functionality Test
procedure p; variable v;
Select <v, p>
a A,b A,c A,d A,i A,j A,a B,b B,c B,d B,i B,j B
5000
19 - Tuple-2 Functionality Test
procedure p; prog_line pl;
Select <pl, p>
1 A,2 A,3 A,4 A,5 A,6 A,7 A,1 B,2 B,3 B,4 B,5 B,6 B,7 B
5000
20 - Tuple-2 Functionality Test
procedure p; constant co;
Select <co, p>
1 A,2 A,3 A,4 A,1 B,2 B,3 B,4 B
5000
21 - Tuple-2 Invalid Test (Syntax Error)
procedure p;
Select <BOOLEAN, p>
none
5000
22 - Tuple-3 Functionality Test
procedure p1, p2, p3;
Select <p1, p2, p3>
A A A, A A B, A B A, B A A, A B B, B A B, B B A, B B B
5000
23 - Tuple-5 Functionality Test
procedure p1, p2, p3, p4, p5;
Select <p1, p2, p3, p4, p5>
A A A A A, A A A A B, A A A B A, A A A B B, A A B A A, A A B A B, A A B B A, A A B B B, A B A A A, A B A A B, A B A B A, A B A B B, A B B A A, A B B A B, A B B B A, A B B B B, B A A A A, B A A A B, B A A B A, B A A B B, B A B A A, B A B A B, B A B B A, B A B B B, B B A A A, B B A A B, B B A B A, B B A B B, B B B A A, B B B A B, B B B B A, B B B B B
5000
24 - Tuple-10 Functionality Test
procedure p1, p2, p3, p4, p5, p6, p7, p8, p9, p10;
Select <p1, p2, p3, p4, p5, p6, p7, p8, p9, p10>
A A A A A A A A A A, A A A A A A A A A B, A A A A A A A A B A, A A A A A A A A B B, A A A A A A A B A A, A A A A A A A B A B, A A A A A A A B B A, A A A A A A A B B B, A A A A A A B A A A, A A A A A A B A A B, A A A A A A B A B A, A A A A A A B A B B, A A A A A A B B A A, A A A A A A B B A B, A A A A A A B B B A, A A A A A A B B B B, A A A A A B A A A A, A A A A A B A A A B, A A A A A B A A B A, A A A A A B A A B B, A A A A A B A B A A, A A A A A B A B A B, A A A A A B A B B A, A A A A A B A B B B, A A A A A B B A A A, A A A A A B B A A B, A A A A A B B A B A, A A A A A B B A B B, A A A A A B B B A A, A A A A A B B B A B, A A A A A B B B B A, A A A A A B B B B B, A A A A B A A A A A, A A A A B A A A A B, A A A A B A A A B A, A A A A B A A A B B, A A A A B A A B A A, A A A A B A A B A B, A A A A B A A B B A, A A A A B A A B B B, A A A A B A B A A A, A A A A B A B A A B, A A A A B A B A B A, A A A A B A B A B B, A A A A B A B B A A, A A A A B A B B A B, A A A A B A B B B A, A A A A B A B B B B, A A A A B B A A A A, A A A A B B A A A B, A A A A B B A A B A, A A A A B B A A B B, A A A A B B A B A A, A A A A B B A B A B, A A A A B B A B B A, A A A A B B A B B B, A A A A B B B A A A, A A A A B B B A A B, A A A A B B B A B A, A A A A B B B A B B, A A A A B B B B A A, A A A A B B B B A B, A A A A B B B B B A, A A A A B B B B B B, A A A B A A A A A A, A A A B A A A A A B, A A A B A A A A B A, A A A B A A A A B B, A A A B A A A B A A, A A A B A A A B A B, A A A B A A A B B A, A A A B A A A B B B, A A A B A A B A A A, A A A B A A B A A B, A A A B A A B A B A, A A A B A A B A B B, A A A B A A B B A A, A A A B A A B B A B, A A A B A A B B B A, A A A B A A B B B B, A A A B A B A A A A, A A A B A B A A A B, A A A B A B A A B A, A A A B A B A A B B, A A A B A B A B A A, A A A B A B A B A B, A A A B A B A B B A, A A A B A B A B B B, A A A B A B B A A A, A A A B A B B A A B, A A A B A B B A B A, A A A B A B B A B B, A A A B A B B B A A, A A A B A B B B A B, A A A B A B B B B A, A A A B A B B B B B, A A A B B A A A A A, A A A B B A A A A B, A A A B B A A A B A, A A A B B A A A B B, A A A B B A A B A A, A A A B B A A B A B, A A A B B A A B B A, A A A B B A A B B B, A A A B B A B A A A, A A A B B A B A A B, A A A B B A B A B A, A A A B B A B A B B, A A A B B A B B A A, A A A B B A B B A B, A A A B B A B B B A, A A A B B A B B B B, A A A B B B A A A A, A A A B B B A A A B, A A A B B B A A B A, A A A B B B A A B B, A A A B B B A B A A, A A A B B B A B A B, A A A B B B A B B A, A A A B B B A B B B, A A A B B B B A A A, A A A B B B B A A B, A A A B B B B A B A, A A A B B B B A B B, A A A B B B B B A A, A A A B B B B B A B, A A A B B B B B B A, A A A B B B B B B B, A A B A A A A A A A, A A B A A A A A A B, A A B A A A A A B A, A A B A A A A A B B, A A B A A A A B A A, A A B A A A A B A B, A A B A A A A B B A, A A B A A A A B B B, A A B A A A B A A A, A A B A A A B A A B, A A B A A A B A B A, A A B A A A B A B B, A A B A A A B B A A, A A B A A A B B A B, A A B A A A B B B A, A A B A A A B B B B, A A B A A B A A A A, A A B A A B A A A B, A A B A A B A A B A, A A B A A B A A B B, A A B A A B A B A A, A A B A A B A B A B, A A B A A B A B B A, A A B A A B A B B B, A A B A A B B A A A, A A B A A B B A A B, A A B A A B B A B A, A A B A A B B A B B, A A B A A B B B A A, A A B A A B B B A B, A A B A A B B B B A, A A B A A B B B B B, A A B A B A A A A A, A A B A B A A A A B, A A B A B A A A B A, A A B A B A A A B B, A A B A B A A B A A, A A B A B A A B A B, A A B A B A A B B A, A A B A B A A B B B, A A B A B A B A A A, A A B A B A B A A B, A A B A B A B A B A, A A B A B A B A B B, A A B A B A B B A A, A A B A B A B B A B, A A B A B A B B B A, A A B A B A B B B B, A A B A B B A A A A, A A B A B B A A A B, A A B A B B A A B A, A A B A B B A A B B, A A B A B B A B A A, A A B A B B A B A B, A A B A B B A B B A, A A B A B B A B B B, A A B A B B B A A A, A A B A B B B A A B, A A B A B B B A B A, A A B A B B B A B B, A A B A B B B B A A, A A B A B B B B A B, A A B A B B B B B A, A A B A B B B B B B, A A B B A A A A A A, A A B B A A A A A B, A A B B A A A A B A, A A B B A A A A B B, A A B B A A A B A A, A A B B A A A B A B, A A B B A A A B B A, A A B B A A A B B B, A A B B A A B A A A, A A B B A A B A A B, A A B B A A B A B A, A A B B A A B A B B, A A B B A A B B A A, A A B B A A B B A B, A A B B A A B B B A, A A B B A A B B B B, A A B B A B A A A A, A A B B A B A A A B, A A B B A B A A B A, A A B B A B A A B B, A A B B A B A B A A, A A B B A B A B A B, A A B B A B A B B A, A A B B A B A B B B, A A B B A B B A A A, A A B B A B B A A B, A A B B A B B A B A, A A B B A B B A B B, A A B B A B B B A A, A A B B A B B B A B, A A B B A B B B B A, A A B B A B B B B B, A A B B B A A A A A, A A B B B A A A A B, A A B B B A A A B A, A A B B B A A A B B, A A B B B A A B A A, A A B B B A A B A B, A A B B B A A B B A, A A B B B A A B B B, A A B B B A B A A A, A A B B B A B A A B, A A B B B A B A B A, A A B B B A B A B B, A A B B B A B B A A, A A B B B A B B A B, A A B B B A B B B A, A A B B B A B B B B, A A B B B B A A A A, A A B B B B A A A B, A A B B B B A A B A, A A B B B B A A B B, A A B B B B A B A A, A A B B B B A B A B, A A B B B B A B B A, A A B B B B A B B B, A A B B B B B A A A, A A B B B B B A A B, A A B B B B B A B A, A A B B B B B A B B, A A B B B B B B A A, A A B B B B B B A B, A A B B B B B B B A, A A B B B B B B B B, A B A A A A A A A A, A B A A A A A A A B, A B A A A A A A B A, A B A A A A A A B B, A B A A A A A B A A, A B A A A A A B A B, A B A A A A A B B A, A B A A A A A B B B, A B A A A A B A A A, A B A A A A B A A B, A B A A A A B A B A, A B A A A A B A B B, A B A A A A B B A A, A B A A A A B B A B, A B A A A A B B B A, A B A A A A B B B B, A B A A A B A A A A, A B A A A B A A A B, A B A A A B A A B A, A B A A A B A A B B, A B A A A B A B A A, A B A A A B A B A B, A B A A A B A B B A, A B A A A B A B B B, A B A A A B B A A A, A B A A A B B A A B, A B A A A B B A B A, A B A A A B B A B B, A B A A A B B B A A, A B A A A B B B A B, A B A A A B B B B A, A B A A A B B B B B, A B A A B A A A A A, A B A A B A A A A B, A B A A B A A A B A, A B A A B A A A B B, A B A A B A A B A A, A B A A B A A B A B, A B A A B A A B B A, A B A A B A A B B B, A B A A B A B A A A, A B A A B A B A A B, A B A A B A B A B A, A B A A B A B A B B, A B A A B A B B A A, A B A A B A B B A B, A B A A B A B B B A, A B A A B A B B B B, A B A A B B A A A A, A B A A B B A A A B, A B A A B B A A B A, A B A A B B A A B B, A B A A B B A B A A, A B A A B B A B A B, A B A A B B A B B A, A B A A B B A B B B, A B A A B B B A A A, A B A A B B B A A B, A B A A B B B A B A, A B A A B B B A B B, A B A A B B B B A A, A B A A B B B B A B, A B A A B B B B B A, A B A A B B B B B B, A B A B A A A A A A, A B A B A A A A A B, A B A B A A A A B A, A B A B A A A A B B, A B A B A A A B A A, A B A B A A A B A B, A B A B A A A B B A, A B A B A A A B B B, A B A B A A B A A A, A B A B A A B A A B, A B A B A A B A B A, A B A B A A B A B B, A B A B A A B B A A, A B A B A A B B A B, A B A B A A B B B A, A B A B A A B B B B, A B A B A B A A A A, A B A B A B A A A B, A B A B A B A A B A, A B A B A B A A B B, A B A B A B A B A A, A B A B A B A B A B, A B A B A B A B B A, A B A B A B A B B B, A B A B A B B A A A, A B A B A B B A A B, A B A B A B B A B A, A B A B A B B A B B, A B A B A B B B A A, A B A B A B B B A B, A B A B A B B B B A, A B A B A B B B B B, A B A B B A A A A A, A B A B B A A A A B, A B A B B A A A B A, A B A B B A A A B B, A B A B B A A B A A, A B A B B A A B A B, A B A B B A A B B A, A B A B B A A B B B, A B A B B A B A A A, A B A B B A B A A B, A B A B B A B A B A, A B A B B A B A B B, A B A B B A B B A A, A B A B B A B B A B, A B A B B A B B B A, A B A B B A B B B B, A B A B B B A A A A, A B A B B B A A A B, A B A B B B A A B A, A B A B B B A A B B, A B A B B B A B A A, A B A B B B A B A B, A B A B B B A B B A, A B A B B B A B B B, A B A B B B B A A A, A B A B B B B A A B, A B A B B B B A B A, A B A B B B B A B B, A B A B B B B B A A, A B A B B B B B A B, A B A B B B B B B A, A B A B B B B B B B, A B B A A A A A A A, A B B A A A A A A B, A B B A A A A A B A, A B B A A A A A B B, A B B A A A A B A A, A B B A A A A B A B, A B B A A A A B B A, A B B A A A A B B B, A B B A A A B A A A, A B B A A A B A A B, A B B A A A B A B A, A B B A A A B A B B, A B B A A A B B A A, A B B A A A B B A B, A B B A A A B B B A, A B B A A A B B B B, A B B A A B A A A A, A B B A A B A A A B, A B B A A B A A B A, A B B A A B A A B B, A B B A A B A B A A, A B B A A B A B A B, A B B A A B A B B A, A B B A A B A B B B, A B B A A B B A A A, A B B A A B B A A B, A B B A A B B A B A, A B B A A B B A B B, A B B A A B B B A A, A B B A A B B B A B, A B B A A B B B B A, A B B A A B B B B B, A B B A B A A A A A, A B B A B A A A A B, A B B A B A A A B A, A B B A B A A A B B, A B B A B A A B A A, A B B A B A A B A B, A B B A B A A B B A, A B B A B A A B B B, A B B A B A B A A A, A B B A B A B A A B, A B B A B A B A B A, A B B A B A B A B B, A B B A B A B B A A, A B B A B A B B A B, A B B A B A B B B A, A B B A B A B B B B, A B B A B B A A A A, A B B A B B A A A B, A B B A B B A A B A, A B B A B B A A B B, A B B A B B A B A A, A B B A B B A B A B, A B B A B B A B B A, A B B A B B A B B B, A B B A B B B A A A, A B B A B B B A A B, A B B A B B B A B A, A B B A B B B A B B, A B B A B B B B A A, A B B A B B B B A B, A B B A B B B B B A, A B B A B B B B B B, A B B B A A A A A A, A B B B A A A A A B, A B B B A A A A B A, A B B B A A A A B B, A B B B A A A B A A, A B B B A A A B A B, A B B B A A A B B A, A B B B A A A B B B, A B B B A A B A A A, A B B B A A B A A B, A B B B A A B A B A, A B B B A A B A B B, A B B B A A B B A A, A B B B A A B B A B, A B B B A A B B B A, A B B B A A B B B B, A B B B A B A A A A, A B B B A B A A A B, A B B B A B A A B A, A B B B A B A A B B, A B B B A B A B A A, A B B B A B A B A B, A B B B A B A B B A, A B B B A B A B B B, A B B B A B B A A A, A B B B A B B A A B, A B B B A B B A B A, A B B B A B B A B B, A B B B A B B B A A, A B B B A B B B A B, A B B B A B B B B A, A B B B A B B B B B, A B B B B A A A A A, A B B B B A A A A B, A B B B B A A A B A, A B B B B A A A B B, A B B B B A A B A A, A B B B B A A B A B, A B B B B A A B B A, A B B B B A A B B B, A B B B B A B A A A, A B B B B A B A A B, A B B B B A B A B A, A B B B B A B A B B, A B B B B A B B A A, A B B B B A B B A B, A B B B B A B B B A, A B B B B A B B B B, A B B B B B A A A A, A B B B B B A A A B, A B B B B B A A B A, A B B B B B A A B B, A B B B B B A B A A, A B B B B B A B A B, A B B B B B A B B A, A B B B B B A B B B, A B B B B B B A A A, A B B B B B B A A B, A B B B B B B A B A, A B B B B B B A B B, A B B B B B B B A A, A B B B B B B B A B, A B B B B B B B B A, A B B B B B B B B B, B A A A A A A A A A, B A A A A A A A A B, B A A A A A A A B A, B A A A A A A A B B, B A A A A A A B A A, B A A A A A A B A B, B A A A A A A B B A, B A A A A A A B B B, B A A A A A B A A A, B A A A A A B A A B, B A A A A A B A B A, B A A A A A B A B B, B A A A A A B B A A, B A A A A A B B A B, B A A A A A B B B A, B A A A A A B B B B, B A A A A B A A A A, B A A A A B A A A B, B A A A A B A A B A, B A A A A B A A B B, B A A A A B A B A A, B A A A A B A B A B, B A A A A B A B B A, B A A A A B A B B B, B A A A A B B A A A, B A A A A B B A A B, B A A A A B B A B A, B A A A A B B A B B, B A A A A B B B A A, B A A A A B B B A B, B A A A A B B B B A, B A A A A B B B B B, B A A A B A A A A A, B A A A B A A A A B, B A A A B A A A B A, B A A A B A A A B B, B A A A B A A B A A, B A A A B A A B A B, B A A A B A A B B A, B A A A B A A B B B, B A A A B A B A A A, B A A A B A B A A B, B A A A B A B A B A, B A A A B A B A B B, B A A A B A B B A A, B A A A B A B B A B, B A A A B A B B B A, B A A A B A B B B B, B A A A B B A A A A, B A A A B B A A A B, B A A A B B A A B A, B A A A B B A A B B, B A A A B B A B A A, B A A A B B A B A B, B A A A B B A B B A, B A A A B B A B B B, B A A A B B B A A A, B A A A B B B A A B, B A A A B B B A B A, B A A A B B B A B B, B A A A B B B B A A, B A A A B B B B A B, B A A A B B B B B A, B A A A B B B B B B, B A A B A A A A A A, B A A B A A A A A B, B A A B A A A A B A, B A A B A A A A B B, B A A B A A A B A A, B A A B A A A B A B, B A A B A A A B B A, B A A B A A A B B B, B A A B A A B A A A, B A A B A A B A A B, B A A B A A B A B A, B A A B A A B A B B, B A A B A A B B A A, B A A B A A B B A B, B A A B A A B B B A, B A A B A A B B B B, B A A B A B A A A A, B A A B A B A A A B, B A A B A B A A B A, B A A B A B A A B B, B A A B A B A B A A, B A A B A B A B A B, B A A B A B A B B A, B A A B A B A B B B, B A A B A B B A A A, B A A B A B B A A B, B A A B A B B A B A, B A A B A B B A B B, B A A B A B B B A A, B A A B A B B B A B, B A A B A B B B B A, B A A B A B B B B B, B A A B B A A A A A, B A A B B A A A A B, B A A B B A A A B A, B A A B B A A A B B, B A A B B A A B A A, B A A B B A A B A B, B A A B B A A B B A, B A A B B A A B B B, B A A B B A B A A A, B A A B B A B A A B, B A A B B A B A B A, B A A B B A B A B B, B A A B B A B B A A, B A A B B A B B A B, B A A B B A B B B A, B A A B B A B B B B, B A A B B B A A A A, B A A B B B A A A B, B A A B B B A A B A, B A A B B B A A B B, B A A B B B A B A A, B A A B B B A B A B, B A A B B B A B B A, B A A B B B A B B B, B A A B B B B A A A, B A A B B B B A A B, B A A B B B B A B A, B A A B B B B A B B, B A A B B B B B A A, B A A B B B B B A B, B A A B B B B B B A, B A A B B B B B B B, B A B A A A A A A A, B A B A A A A A A B, B A B A A A A A B A, B A B A A A A A B B, B A B A A A A B A A, B A B A A A A B A B, B A B A A A A B B A, B A B A A A A B B B, B A B A A A B A A A, B A B A A A B A A B, B A B A A A B A B A, B A B A A A B A B B, B A B A A A B B A A, B A B A A A B B A B, B A B A A A B B B A, B A B A A A B B B B, B A B A A B A A A A, B A B A A B A A A B, B A B A A B A A B A, B A B A A B A A B B, B A B A A B A B A A, B A B A A B A B A B, B A B A A B A B B A, B A B A A B A B B B, B A B A A B B A A A, B A B A A B B A A B, B A B A A B B A B A, B A B A A B B A B B, B A B A A B B B A A, B A B A A B B B A B, B A B A A B B B B A, B A B A A B B B B B, B A B A B A A A A A, B A B A B A A A A B, B A B A B A A A B A, B A B A B A A A B B, B A B A B A A B A A, B A B A B A A B A B, B A B A B A A B B A, B A B A B A A B B B, B A B A B A B A A A, B A B A B A B A A B, B A B A B A B A B A, B A B A B A B A B B, B A B A B A B B A A, B A B A B A B B A B, B A B A B A B B B A, B A B A B A B B B B, B A B A B B A A A A, B A B A B B A A A B, B A B A B B A A B A, B A B A B B A A B B, B A B A B B A B A A, B A B A B B A B A B, B A B A B B A B B A, B A B A B B A B B B, B A B A B B B A A A, B A B A B B B A A B, B A B A B B B A B A, B A B A B B B A B B, B A B A B B B B A A, B A B A B B B B A B, B A B A B B B B B A, B A B A B B B B B B, B A B B A A A A A A, B A B B A A A A A B, B A B B A A A A B A, B A B B A A A A B B, B A B B A A A B A A, B A B B A A A B A B, B A B B A A A B B A, B A B B A A A B B B, B A B B A A B A A A, B A B B A A B A A B, B A B B A A B A B A, B A B B A A B A B B, B A B B A A B B A A, B A B B A A B B A B, B A B B A A B B B A, B A B B A A B B B B, B A B B A B A A A A, B A B B A B A A A B, B A B B A B A A B A, B A B B A B A A B B, B A B B A B A B A A, B A B B A B A B A B, B A B B A B A B B A, B A B B A B A B B B, B A B B A B B A A A, B A B B A B B A A B, B A B B A B B A B A, B A B B A B B A B B, B A B B A B B B A A, B A B B A B B B A B, B A B B A B B B B A, B A B B A B B B B B, B A B B B A A A A A, B A B B B A A A A B, B A B B B A A A B A, B A B B B A A A B B, B A B B B A A B A A, B A B B B A A B A B, B A B B B A A B B A, B A B B B A A B B B, B A B B B A B A A A, B A B B B A B A A B, B A B B B A B A B A, B A B B B A B A B B, B A B B B A B B A A, B A B B B A B B A B, B A B B B A B B B A, B A B B B A B B B B, B A B B B B A A A A, B A B B B B A A A B, B A B B B B A A B A, B A B B B B A A B B, B A B B B B A B A A, B A B B B B A B A B, B A B B B B A B B A, B A B B B B A B B B, B A B B B B B A A A, B A B B B B B A A B, B A B B B B B A B A, B A B B B B B A B B, B A B B B B B B A A, B A B B B B B B A B, B A B B B B B B B A, B A B B B B B B B B, B B A A A A A A A A, B B A A A A A A A B, B B A A A A A A B A, B B A A A A A A B B, B B A A A A A B A A, B B A A A A A B A B, B B A A A A A B B A, B B A A A A A B B B, B B A A A A B A A A, B B A A A A B A A B, B B A A A A B A B A, B B A A A A B A B B, B B A A A A B B A A, B B A A A A B B A B, B B A A A A B B B A, B B A A A A B B B B, B B A A A B A A A A, B B A A A B A A A B, B B A A A B A A B A, B B A A A B A A B B, B B A A A B A B A A, B B A A A B A B A B, B B A A A B A B B A, B B A A A B A B B B, B B A A A B B A A A, B B A A A B B A A B, B B A A A B B A B A, B B A A A B B A B B, B B A A A B B B A A, B B A A A B B B A B, B B A A A B B B B A, B B A A A B B B B B, B B A A B A A A A A, B B A A B A A A A B, B B A A B A A A B A, B B A A B A A A B B, B B A A B A A B A A, B B A A B A A B A B, B B A A B A A B B A, B B A A B A A B B B, B B A A B A B A A A, B B A A B A B A A B, B B A A B A B A B A, B B A A B A B A B B, B B A A B A B B A A, B B A A B A B B A B, B B A A B A B B B A, B B A A B A B B B B, B B A A B B A A A A, B B A A B B A A A B, B B A A B B A A B A, B B A A B B A A B B, B B A A B B A B A A, B B A A B B A B A B, B B A A B B A B B A, B B A A B B A B B B, B B A A B B B A A A, B B A A B B B A A B, B B A A B B B A B A, B B A A B B B A B B, B B A A B B B B A A, B B A A B B B B A B, B B A A B B B B B A, B B A A B B B B B B, B B A B A A A A A A, B B A B A A A A A B, B B A B A A A A B A, B B A B A A A A B B, B B A B A A A B A A, B B A B A A A B A B, B B A B A A A B B A, B B A B A A A B B B, B B A B A A B A A A, B B A B A A B A A B, B B A B A A B A B A, B B A B A A B A B B, B B A B A A B B A A, B B A B A A B B A B, B B A B A A B B B A, B B A B A A B B B B, B B A B A B A A A A, B B A B A B A A A B, B B A B A B A A B A, B B A B A B A A B B, B B A B A B A B A A, B B A B A B A B A B, B B A B A B A B B A, B B A B A B A B B B, B B A B A B B A A A, B B A B A B B A A B, B B A B A B B A B A, B B A B A B B A B B, B B A B A B B B A A, B B A B A B B B A B, B B A B A B B B B A, B B A B A B B B B B, B B A B B A A A A A, B B A B B A A A A B, B B A B B A A A B A, B B A B B A A A B B, B B A B B A A B A A, B B A B B A A B A B, B B A B B A A B B A, B B A B B A A B B B, B B A B B A B A A A, B B A B B A B A A B, B B A B B A B A B A, B B A B B A B A B B, B B A B B A B B A A, B B A B B A B B A B, B B A B B A B B B A, B B A B B A B B B B, B B A B B B A A A A, B B A B B B A A A B, B B A B B B A A B A, B B A B B B A A B B, B B A B B B A B A A, B B A B B B A B A B, B B A B B B A B B A, B B A B B B A B B B, B B A B B B B A A A, B B A B B B B A A B, B B A B B B B A B A, B B A B B B B A B B, B B A B B B B B A A, B B A B B B B B A B, B B A B B B B B B A, B B A B B B B B B B, B B B A A A A A A A, B B B A A A A A A B, B B B A A A A A B A, B B B A A A A A B B, B B B A A A A B A A, B B B A A A A B A B, B B B A A A A B B A, B B B A A A A B B B, B B B A A A B A A A, B B B A A A B A A B, B B B A A A B A B A, B B B A A A B A B B, B B B A A A B B A A, B B B A A A B B A B, B B B A A A B B B A, B B B A A A B B B B, B B B A A B A A A A, B B B A A B A A A B, B B B A A B A A B A, B B B A A B A A B B, B B B A A B A B A A, B B B A A B A B A B, B B B A A B A B B A, B B B A A B A B B B, B B B A A B B A A A, B B B A A B B A A B, B B B A A B B A B A, B B B A A B B A B B, B B B A A B B B A A, B B B A A B B B A B, B B B A A B B B B A, B B B A A B B B B B, B B B A B A A A A A, B B B A B A A A A B, B B B A B A A A B A, B B B A B A A A B B, B B B A B A A B A A, B B B A B A A B A B, B B B A B A A B B A, B B B A B A A B B B, B B B A B A B A A A, B B B A B A B A A B, B B B A B A B A B A, B B B A B A B A B B, B B B A B A B B A A, B B B A B A B B A B, B B B A B A B B B A, B B B A B A B B B B, B B B A B B A A A A, B B B A B B A A A B, B B B A B B A A B A, B B B A B B A A B B, B B B A B B A B A A, B B B A B B A B A B, B B B A B B A B B A, B B B A B B A B B B, B B B A B B B A A A, B B B A B B B A A B, B B B A B B B A B A, B B B A B B B A B B, B B B A B B B B A A, B B B A B B B B A B, B B B A B B B B B A, B B B A B B B B B B, B B B B A A A A A A, B B B B A A A A A B, B B B B A A A A B A, B B B B A A A A B B, B B B B A A A B A A, B B B B A A A B A B, B B B B A A A B B A, B B B B A A A B B B, B B B B A A B A A A, B B B B A A B A A B, B B B B A A B A B A, B B B B A A B A B B, B B B B A A B B A A, B B B B A A B B A B, B B B B A A B B B A, B B B B A A B B B B, B B B B A B A A A A, B B B B A B A A A B, B B B B A B A A B A, B B B B A B A A B B, B B B B A B A B A A, B B B B A B A B A B, B B B B A B A B B A, B B B B A B A B B B, B B B B A B B A A A, B B B B A B B A A B, B B B B A B B A B A, B B B B A B B A B B, B B B B A B B B A A, B B B B A B B B A B, B B B B A B B B B A, B B B B A B B B B B, B B B B B A A A A A, B B B B B A A A A B, B B B B B A A A B A, B B B B B A A A B B, B B B B B A A B A A, B B B B B A A B A B, B B B B B A A B B A, B B B B B A A B B B, B B B B B A B A A A, B B B B B A B A A B, B B B B B A B A B A, B B B B B A B A B B, B B B B B A B B A A, B B B B B A B B A B, B B B B B A B B B A, B B B B B A B B B B, B B B B B B A A A A, B B B B B B A A A B, B B B B B B A A B A, B B B B B B A A B B, B B B B B B A B A A, B B B B B B A B A B, B B B B B B A B B A, B B B B B B A B B B, B B B B B B B A A A, B B B B B B B A A B, B B B B B B B A B A, B B B B B B B A B B, B B B B B B B B A A, B B B B B B B B A B, B B B B B B B B B A, B B B B B B B B B B
5000
25 - Tuple-2 Functionality Multiple Clauses Test
procedure p1, p2; stmt s1, s2; assign a; variable v; 
Select <p1, p1> such that Follows(s1,s2) pattern a(v,"1") with p2.procName="A"
A A, B B
5000
26 - Tuple-2 Functionality Multiple Clauses Test
procedure p; stmt s1, s2; assign a; variable v; stmtLst sl;
Select <sl, sl> such that Follows(s1,s2) pattern a(v,"1") with p.procName="A"
1 1, 2 2, 4 4, 5 5, 6 6
5000
27 - Tuple-2 Functionality Multiple Clauses Test
procedure p; stmt s1, s2, s3; assign a; variable v; 
Select <s3, s3> such that Follows(s1,s2) pattern a(v,"1") with p.procName="A"
1 1, 2 2, 3 3, 4 4, 5 5, 6 6, 7 7
5000
28 - Tuple-2 Functionality Multiple Clauses Test
procedure p; stmt s1, s2; assign a1, a2; variable v; 
Select <a1, a1> such that Follows(s1,s2) pattern a2(v,"1") with p.procName="A"
2 2, 5 5, 6 6, 7 7
5000
29 - Tuple-2 Functionality Multiple Clauses Test
procedure p; stmt s1, s2; assign a; variable v; call ca;
Select <ca, ca> such that Follows(s1,s2) pattern a(v,"1") with p.procName="A"
4 4
5000
30 - Tuple-2 Functionality Multiple Clauses Test
procedure p; stmt s1, s2; assign a; variable v; while w;
Select <w, w> such that Follows(s1,s2) pattern a(v,"1") with p.procName="A"
1 1
5000
31 - Tuple-2 Functionality Multiple Clauses Test
procedure p; stmt s1, s2; assign a; variable v; if w;
Select <w, w> such that Follows(s1,s2) pattern a(v,"1") with p.procName="A"
3 3
5000
32 - Tuple-2 Functionality Multiple Clauses Test
procedure p; stmt s1, s2; assign a; variable v1, v2;
Select <v1, v1> such that Follows(s1,s2) pattern a(v2,"1") with p.procName="A"
a a, b b, c c, d d, i i, j j
5000
33 - Tuple-2 Functionality Multiple Clauses Test
procedure p; stmt s1, s2; assign a; variable v; prog_line pl;
Select <pl, pl> such that Follows(s1,s2) pattern a(v,"1") with p.procName="A"
1 1, 2 2, 3 3, 4 4, 5 5, 6 6, 7 7
5000
34 - Tuple-2 Functionality Multiple Clauses Test
procedure p; stmt s1, s2; assign a; variable v; constant co;
Select <co, co> such that Follows(s1,s2) pattern a(v,"1") with p.procName="A"
1 1, 2 2, 3 3, 4 4
5000
35 - Tuple-2 Functionality Multiple Clauses Test
procedure p; stmt s1, s2; assign a; variable v; prog_line pl;
Select <pl, pl> such that Follows(s1,s2) pattern a(v,"1") with p.procName="A"
1 1, 2 2, 3 3, 4 4, 5 5, 6 6, 7 7
5000
36 - Tuple-2 Functionality Multiple Clauses Test
procedure p; stmt s1, s2; assign a; variable v; prog_line pl;
Select <pl, pl> such that Follows*(s1,s2) pattern a(v,"1") with p.procName="A"
1 1, 2 2, 3 3, 4 4, 5 5, 6 6, 7 7
5000
37 - Tuple-2 Functionality Multiple Clauses Test
procedure p; stmt s1, s2; assign a; variable v; prog_line pl;
Select <pl, pl> such that Parent(s1,s2) pattern a("a","1") with p.procName="A"
1 1, 2 2, 3 3, 4 4, 5 5, 6 6, 7 7
5000
38 - Tuple-2 Functionality Multiple Clauses Test
procedure p; stmt s1, s2; assign a; variable v; prog_line pl;
Select <pl, pl> such that Parent*(s1,s2) pattern a(_,"1") with p.procName="A"
1 1, 2 2, 3 3, 4 4, 5 5, 6 6, 7 7
5000
39 - Tuple-2 Functionality Multiple Clauses Test
procedure p; stmt s; assign a; variable v1, v2; prog_line pl;
Select <pl, pl> such that Uses(s,v1) pattern a(v2,_"1"_) with p.procName="A"
1 1, 2 2, 3 3, 4 4, 5 5, 6 6, 7 7
5000
40 - Tuple-2 Functionality Multiple Clauses Test
procedure p; stmt s; assign a; variable v1, v2, v3;
Select <v3, v3> such that Modifies(s,v1) pattern a(v2,_) with p.procName="A"
a a, b b, c c, d d, i i, j j
5000
41 - Tuple-2 Functionality Multiple Clauses Test
procedure p1, p2, p3; assign a; variable v1, v2;
Select <v2, v2> such that Calls(p1,p2) pattern a(v1,"2") with p3.procName="A"
a a, b b, c c, d d, i i, j j
5000
42 - Tuple-2 Functionality Multiple Clauses Test
procedure p1, p2, p3; assign a; variable v, w;
Select <w, w> such that Calls*(p1,p2) pattern a("d","4+c") with p3.procName="B"
a a, b b, c c, d d, i i, j j
5000
43 - Tuple-2 Functionality Multiple Clauses Test
procedure p; assign a; variable v; prog_line pl1, pl2, pl3;
Select <pl3, pl3> such that Next(pl1,pl2) pattern a(_,"3") with p.procName="A"
1 1, 2 2, 3 3, 4 4, 5 5, 6 6, 7 7
5000
44 - Tuple-2 Functionality Multiple Clauses Test
procedure p3; assign a; variable v; prog_line p1, p2, pl;
Select <pl, pl> such that Next*(p1,p2) pattern a(v,_"4"_) with p3.procName="A"
1 1, 2 2, 3 3, 4 4, 5 5, 6 6, 7 7
5000
45 - Tuple-2 Functionality Multiple Clauses Test
procedure p2; assign a; variable v; stmt s1, s2, s3;
Select <s3, s3> such that Affects(s1,s2) pattern a(v,_) with p2.procName="A"
1 1, 2 2, 3 3, 4 4, 5 5, 6 6, 7 7
5000
46 - Tuple-2 Functionality Multiple Clauses Test
procedure p2; assign a; variable v; stmt s1, s2, s3;
Select <s3, s3> such that Affects*(s1,s2) pattern a(v,"2") with p2.procName="A"
1 1, 2 2, 3 3, 4 4, 5 5, 6 6, 7 7
5000
47 - Tuple-2 Functionality Multiple Clauses Test
procedure p; stmt s1, s2; while a; variable v, w;
Select <w, w> such that Follows*(s1,s2) pattern a(v,_) with p.procName="A"
a a, b b, c c, d d, i i, j j
5000
48 - Tuple-2 Functionality Multiple Clauses Test
procedure p; stmt s1, s2; if a; variable v, w;
Select <w, w> such that Parent(s1,s2) pattern a("j",_,_) with p.procName="B"
a a, b b, c c, d d, i i, j j
5000
49 - Tuple-2 Functionality Multiple Clauses Test
stmt s1, s2; assign a; variable v, w;
Select <w, w> such that Parent*(s1,s2) pattern a(_,"1") with v.varName="a"
a a, b b, c c, d d, i i, j j
5000
50 - Tuple-2 Functionality Multiple Clauses Test
constant co; stmt s1, s2; while a; variable v1, v2;
Select <s1, s1> such that Uses(s2,v1) pattern a(v2,_) with co.value=3
1 1, 2 2, 3 3, 4 4, 5 5, 6 6, 7 7
5000
51 - Tuple-2 Functionality Multiple Clauses Test
stmt s1, s2, s3; if a; variable v1, v2;
Select <s3, s3> such that Modifies(s1,v1) pattern a(v2,_,_) with s2.stmt#=2
1 1, 2 2, 3 3, 4 4, 5 5, 6 6, 7 7
5000
52 - Tuple-2 Functionality Multiple Clauses Test
procedure p1, p2; assign a; prog_line pl, pl2;
Select <pl2, pl2> such that Calls*(p1,p2) pattern a("d","4+c") with pl=1
1 1, 2 2, 3 3, 4 4, 5 5, 6 6, 7 7
5000
53 - Tuple-2 Common Synonym in Tuple Test
procedure p;
Select <p, p>
A A, B B
5000
54 - Tuple-2 Common Synonym in Tuple Test
stmtLst sl;
Select <sl, sl>
1 1, 2 2,4 4, 5 5,6 6
5000
55 - Tuple-2 Common Synonym in Tuple Test
stmt s;
Select <s, s>
1 1, 2 2, 3 3,4 4,5 5, 6 6, 7 7
5000
56 - Tuple-2 Common Synonym in Tuple Test
assign a;
Select <a, a>
2 2, 5 5,6 6,7 7
5000
57 - Tuple-2 Common Synonym in Tuple Test
call s;
Select <s, s>
4 4
5000
58 - Tuple-2 Common Synonym in Tuple Test
while sl;
Select <sl, sl>
1 1
5000
59 - Tuple-2 Common Synonym in Tuple Test
if s;
Select <s, s>
3 3
5000
60 - Tuple-2 Common Synonym in Tuple Test
variable s;
Select <s, s>
i i, a a,j j,b b, c c, d d
5000
61 - Tuple-2 Common Synonym in Tuple Test
prog_line sl;
Select <sl, sl>
1 1,2 2,3 3,4 4,5 5, 6 6, 7 7
5000
62 - Tuple-2 Common Synonym in Tuple Test
constant s;
Select <s, s>
1 1,2 2, 3 3,4 4
5000
63 - Tuple-2 Common Synonym in Tuple Invalid Test

Select <BOOLEAN, BOOLEAN>
none
5000
64 - Tuple-4 Common Synonym in Tuple Test
procedure p;
Select <p, p, p, p>
A A A A, B B B B
5000
65 - Tuple-4 Common Synonym in Tuple Test (Positional Test)
procedure p1, p2;
Select <p1, p2, p1, p2>
A A A A, B B B B,A B A B, B A B A
5000
66 - Tuple-4 Common Synonym in Tuple Test (Positional Test)
procedure p1, p2;
Select <p1, p1, p2, p2>
A A A A,B B B B,A A B B,B B A A
5000
67 - Tuple-4 Common Synonym in Tuple Test (Positional Test)
procedure p1, p2;
Select <p1, p1, p2, p2>
A A A A, B B B B,A A B B,B B A A
5000
68 - Tuple-4 Common Synonym in Tuple Test (Positional Test)
procedure p1, p2;
Select <p1, p2, p2, p1>
A A A A,B B B B,A B B A, B A A B
5000
69 - Tuple-4 Common Synonym in Tuple Test (Positional Test)
procedure p1, p2, p3;
Select <p1, p1, p2, p3,>
A A A A, A A A B, A A B A, A A B B, B B A A, B B B A, B B A B, B B B B
5000
70 - Tuple-4 Common Synonym in Tuple Test (Positional Test)
procedure p1, p2, p3;
Select <p1, p2, p2, p3>
A A A A,A A A B, B A A A,B A A B, A B B A,B B B A, A B B B,B B B B
5000
71 - Tuple-4 Common Synonym in Tuple Test (Positional Test)
procedure p1, p2, p3;
Select <p1, p2, p3, p3>
A A A A, B A A A,A B A A, B B A A,A A B B, B A B B,A B B B, B B B B
5000
72 - Tuple-2 Common Synonym in Tuple with Clause
stmt s1, s2;
Select <s1, s2> such that Follows(s1,s2)
1 3, 6 7
5000
73 - Tuple-2 Common Synonym in Tuple with Clause
stmt s1, s2;
Select <s1, s2> such that Follows*(s1,s2)
1 3, 6 7
5000
74 - Tuple-2 Common Synonym in Tuple with Clause
stmt s1, s2;
Select <s1, s2> such that Parent(s1,s2)
1 2, 3 4, 3 5
5000
75 - Tuple-2 Common Synonym in Tuple with Clause
stmt s1, s2;
Select <s1, s2> such that Parent*(s1,s2)
1 2, 3 4, 3 5
5000
76 - Tuple-2 Common Synonym in Tuple with Clause
stmt s; variable v;
Select <s, v> such that Uses(s,v)
1 i, 3 j, 7 c, 3 c, 4 c
5000
77 - Tuple-2 Common Synonym in Tuple with Clause
stmt s; variable v;
Select <s, v> such that Modifies(s,v)
1 a, 2 a, 3 c, 3 d, 3 b, 4 c, 4 d, 5 b, 6 c, 7 d
5000
78 - Tuple-2 Common Synonym in Tuple with Clause
procedure p,q;
Select <p, q> such that Calls(p,q)
A B
5000
79 - Tuple-2 Common Synonym in Tuple with Clause
procedure p,q;
Select <p, q> such that Calls*(p,q)
A B
5000
80 - Tuple-2 Common Synonym in Tuple with Clause
prog_line p,q;
Select <p, q> such that Next(p,q)
1 2, 1 3, 2 1, 3 4, 3 5, 6 7
5000
81 - Tuple-2 Common Synonym in Tuple with Clause
prog_line p,q;
Select <p, q> such that Next*(p,q)
1 1, 1 2, 1 3, 1 4, 1 5, 2 1, 2 2, 2 3, 2 4, 2 5, 3 4, 3 5, 6 7
5000
82 - Tuple-2 Common Synonym in Tuple with Clause
stmt p,q;
Select <p, q> such that Affects(p,q)
6 7
5000
83 - Tuple-2 Common Synonym in Tuple with Clause
stmt p,q;
Select <p, q> such that Affects*(p,q)
6 7
5000
84 - Tuple-2 Common Synonym in Tuple with Clause
assign a; variable v;
Select <a, v> pattern a(v,"1")
2 a
5000
85 - Tuple-2 Common Synonym in Tuple with Clause
while w; variable v;
Select <w, v> pattern w(v,_)
1 i
5000
86 - Tuple-2 Common Synonym in Tuple with Clause
if w; variable v;
Select <w, v> pattern w(v,_,_)
3 j
5000
87 - Tuple-2 Common Synonym in Tuple with Clause
stmt s; prog_line pl;
Select <s, pl> with s.stmt#=pl
1 1, 2 2, 3 3, 4 4, 5 5, 6 6, 7 7
5000
88 - Tuple-2 Common Synonym in Tuple with Clause
constant s; procedure pl;
Select <s, pl> with s.value=2 and pl.procName="A"
2 A
5000
89 - Tuple-2 Common Synonym in Tuple with Clause
variable s; prog_line pl;
Select <s, pl> with s.varName="a" and pl=3
a 3
5000
90 - Tuple Common Synonyms Multiple Clauses Functionality Test 1
while w; if ifs; prog_line pl; assign a; variable v;
Select <w, ifs, pl, a, v> such that Next(w,ifs) pattern a("a", "1") with v.varName="a" and pl=5
1 3 5 2 a
5000
91 - Tuple Common Synonyms Multiple Clauses Functionality Test 2
assign a; prog_line pl; stmt s; variable v; if ifs;
Select <a, pl, v, s, ifs> such that Follows(s,pl) pattern a(v,_) with v.varName="b" and pl=7
5 7 b 6 3
5000