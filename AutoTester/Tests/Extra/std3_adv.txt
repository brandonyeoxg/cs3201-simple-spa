1 - comment
assign a, a1; call c; constant cn; procedure q; variable v;
Select <a, v, q, c, a1> with a.stmt# = cn.value pattern a(v,_) such that Affects*(a1,_) and Follows*(a1,c) and Uses(q,v) with c.procName = q.procName
3 charlie ANOTHERPROCEDURE 7 1, 3 charlie ANOTHERPROCEDURE 7 2, 3 charlie ANOTHERPROCEDURE 7 6, 6 foxtrot ANOTHERPROCEDURE 7 1, 6 foxtrot ANOTHERPROCEDURE 7 2, 6 foxtrot ANOTHERPROCEDURE 7 6
5000
2 - comment
procedure p, q; while w; variable v;
Select <p, q, v, w> pattern w(v,_) such that Modifies(q,v) and Calls*(p,q)
ASSIGNANDCALL ANOTHERPROCEDURE juliet 16, ASSIGNANDCALL THIRDPROCEDURE juliet 16, ANOTHERPROCEDURE THIRDPROCEDURE juliet 16
5000
3 - comment
assign a, a1; stmt s, s1, s2; variable v;
Select <s, a, s1, v, s2, a1> such that Affects*(s2,a1) and Uses(s2,v) and Modifies(s1,v) and Next*(s1,a) and Parent(s,a)
16 17 16 romeo 17 17, 16 17 17 romeo 17 17
5000
4 - comment
assign a; stmt s, s1; variable v;
Select <s, a, s1, v> pattern a(_,_"1"_) such that Modifies(s1,v) and Next*(s1,a) and Parent(s,a)
16 17 12 charlie, 16 17 13 juliet, 16 17 14 juliet, 16 17 15 juliet, 16 17 16 romeo, 16 17 17 romeo
5000
5 - comment
assign a; stmt s; call c; procedure p; variable v;
Select <p, v, a, s> with c.procName = p.procName such that Next(a,s) and Uses(a,v) and Modifies(p,v)
ANOTHERPROCEDURE charlie 3 4, ANOTHERPROCEDURE romeo 17 16, THIRDPROCEDURE charlie 3 4, THIRDPROCEDURE romeo 17 16
5000
6 - comment
assign a, a1; stmt s, s1;
Select <a, a1, s, s1> such that Follows(s1,s) and Affects(a1,s) and Affects*(_,a)
2 1 2 1, 2 2 3 2, 2 1 8 7, 2 6 8 7, 3 1 2 1, 3 2 3 2, 3 1 8 7, 3 6 8 7, 8 1 2 1, 8 2 3 2, 8 1 8 7, 8 6 8 7, 17 1 2 1, 17 2 3 2, 17 1 8 7, 17 6 8 7
5000
7 - comment
assign a, a1; constant cn; if ifs; stmt s; variable v;
Select <s, a, v, ifs> pattern ifs(v,_,_) with s.stmt#=cn.value such that Uses(a,v) and Affects*(s,a)
1 3 charlie 13, 2 3 charlie 13
5000
8 - comment
call c; procedure p; variable v, v1; stmt s, s1;
Select <v, c, v1> with v.varName = v1.varName such that Calls*(p,"THIRDPROCEDURE") and Next*(1,c) and Modifies(s1,v1) with c.procName = p.procName such that Uses(s,v)
alpha 7 alpha, bravo 7 bravo, charlie 7 charlie, delta 7 delta, foxtrot 7 foxtrot, juliet 7 juliet, romeo 7 romeo
5000
9 - comment
stmt s, s1, s2; variable v; while w;
Select <v, s1, s2> such that Uses(s1,v) and Uses(s,v) and Next*(s1,s2) and Next*(w,s)
juliet 7 8, juliet 9 10, juliet 9 11, juliet 16 16, juliet 16 17, romeo 7 8, romeo 9 10, romeo 9 11, romeo 16 16, romeo 16 17, romeo 17 16, romeo 17 17
5000
10 - comment
assign a; call c; stmt s, s1; variable v;
Select <s, a, v> with c.stmt# = s1.stmt# such that Follows*(a, s1) and Modifies(a,v) and Next*(14,s) and Affects*(a,8)
16 1 alpha, 17 1 alpha, 16 6 foxtrot, 17 6 foxtrot
5000
11 - comment
call c;
Select <c.stmt#, c.procName> such that Follows(c,8)
7 ANOTHERPROCEDURE
5000
12 - comment
procedure p, q; variable v;
Select <q.procName, v.varName> such that Modifies(q,v) and Calls*(p,q)
ANOTHERPROCEDURE delta, ANOTHERPROCEDURE india, ANOTHERPROCEDURE charlie, ANOTHERPROCEDURE juliet, ANOTHERPROCEDURE romeo, THIRDPROCEDURE charlie, THIRDPROCEDURE juliet, THIRDPROCEDURE romeo
5000
13 - comment
assign a; constant cn; variable v;
Select <cn.value, v> such that Uses("THIRDPROCEDURE", v) pattern a(v,_)
1 charlie, 2 charlie, 3 charlie, 4 charlie, 5 charlie, 6 charlie, 8 charlie, 10 charlie, 78 charlie, 89 charlie, 98 charlie, 99 charlie, 132 charlie, 1 foxtrot, 2 foxtrot, 3 foxtrot, 4 foxtrot, 5 foxtrot, 6 foxtrot, 8 foxtrot, 10 foxtrot, 78 foxtrot, 89 foxtrot, 98 foxtrot, 99 foxtrot, 132 foxtrot, 1 juliet, 2 juliet, 3 juliet, 4 juliet, 5 juliet, 6 juliet, 8 juliet, 10 juliet, 78 juliet, 89 juliet, 98 juliet, 99 juliet, 132 juliet, 1 romeo, 2 romeo, 3 romeo, 4 romeo, 5 romeo, 6 romeo, 8 romeo, 10 romeo, 78 romeo, 89 romeo, 98 romeo, 99 romeo, 132 romeo
5000
14 - comment
stmtLst lst; variable v; while w;
Select <w, lst, w.stmt#> with v.varName = "juliet" pattern w(v,_)
16 1 16, 16 9 16, 16 12 16, 16 14 16, 16 15 16, 16 17 16
5000
15 - comment
assign a; if ifs;
Select <a.stmt#, ifs.stmt#> such that Parent(ifs,a)
14 13, 15 13
5000